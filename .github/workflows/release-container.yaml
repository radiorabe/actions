name: Release Container Image

on:
  workflow_call:
    inputs:
      image:
        description: 'image to build and push'
        required: true
        type: string
      name:
        description: 'name for the name label'
        required: true
        type: string
      display-name:
        description: 'display name for the io.k8s.display-name label'
        required: true
        type: string
      tags:
        description: 'tags for the io.openshift.tags label'
        required: true
        type: string
      cosign-verify:
        description: 'enable cosign verification'
        required: false
        default: true
        type: boolean
      cosign-certificate-oidc-issuer:
        description: 'issuer used for keyless signature verification'
        required: false
        default: 'https://token.actions.githubusercontent.com'
        type: string
      cosign-certificate-identity-regexp:
        description: 'regex to verify the subject against'
        required: false
        default: 'https://github.com/radiorabe/.*'
        type: string
      cosign-base-image-only:
        description: 'pass --base-image-only arg to cosign dockerfile verify'
        required: false
        default: false
        type: boolean
      dockerfile:
        description: 'Path to the Dockerfile used in the build'
        required: false
        default: 'Dockerfile'
        type: string
      context:
        description: 'Context directory for build'
        required: false
        default: '.'
        type: string
      build-args:
        description: 'Pass ARGs to the build'
        required: false
        default: ''
        type: string
      push-default-branch:
        description: 'Push the default branch (typically `main`) to the rgistry.'
        required: false
        default: false
        type: boolean
      pre-script:
        description: 'Run a script before interacting with the Dockerfile.'
        required: false
        default: ''
        type: string

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: write
      pull-requests: none
      repository-projects: none
      security-events: write
      statuses: none
      id-token: write # needed for signing the images with GitHub OIDC using cosign

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.9.2

      - name: Prepare additional Metadata
        id: additional_meta
        run: |
          echo created=$(date -u +'%Y-%m-%dT%H:%M:%SZ') >> $GITHUB_OUTPUT
          
      - name: Prepare Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.image }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            name=${{ inputs.name }}
            summary=${{ github.event.repository.description }}
            url=${{ github.event.repository.html_url }}
            vcs-ref=${{ github.sha }}
            revision=${{ github.sha }}
            release=${{ github.sha }}
            build-date=${{ steps.additional_meta.outputs.created }}
            io.k8s.display-name=${{ inputs.display-name }}
            io.k8s.description=${{ github.event.repository.description }}
            io.openshift.tags=${{ inputs.tags }}
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run pre script
        run: ${{ inputs.pre-script }}
        if: inputs.pre-script != ''

      - name: Verify ${{ inputs.dockerfile }} using cosign
        run: cosign dockerfile verify --certificate-oidc-issuer ${{ inputs.cosign-certificate-oidc-issuer }} --certificate-identity-regexp ${{ inputs.cosign-certificate-identity-regexp }} ${{ inputs.cosign-base-image-only && '--base-image-only' || '' }} ${{ inputs.dockerfile }} > /dev/null
        if: inputs.cosign-verify

      - name: Build Container Image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ inputs.build-args }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            version=${{ steps.meta.outputs.version }}
        env:
          DOCKER_CONTENT_TRUST: 1
            
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.33.1
        env:
          TRIVY_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-db,public.ecr.aws/aquasecurity/trivy-db
          TRIVY_JAVA_DB_REPOSITORY: ghcr.io/aquasecurity/trivy-java-db,public.ecr.aws/aquasecurity/trivy-java-db
        with:
          image-ref: '${{ inputs.image }}:${{ steps.meta.outputs.version }}'
          format: 'json'
          ignore-unfixed: true
          list-all-pkgs: true
          output: 'trivy.json'

      - name: Convert trivy results to sarif
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: trivy.json
          scan-type: 'convert'
          format: 'sarif'
          # we don't actually limit them, but this gates the convert action
          limit-severities-for-sarif: true
          # empty makes it skip the --vuln-type arg
          vuln-type: ''
          output: 'trivy.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy.sarif'
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Container Image
        id: docker_push
        uses: docker/build-push-action@v6
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && (startsWith(github.event.ref, 'refs/tags/v') || inputs.push-default-branch &&  github.event.ref_name == github.event.repository.default_branch) }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          build-args: ${{ inputs.build-args }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            version=${{ steps.meta.outputs.version }}
        env:
          DOCKER_CONTENT_TRUST: 1

      - name: Sign the images with GitHub OIDC Token using cosign
        run: cosign sign --yes ${{ inputs.image }}@${{ steps.docker_push.outputs.digest }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
        env:
          TAGS: ${{ steps.meta.outputs.tags }}

      - name: Convert trivy results to CycloneDX
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: trivy.json
          scan-type: 'convert'
          format: 'cyclonedx'
          # we don't actually limit them, but this gates the convert action
          limit-severities-for-sarif: true
          # empty makes it skip the --vuln-type arg
          vuln-type: ''
          output: 'trivy.cdx'

      - name: Attach an SBOM attestation to the signed image
        run: cosign attest --yes --type cyclonedx --predicate trivy.cdx ${{ inputs.image }}@${{ steps.docker_push.outputs.digest }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')

      - name: Convert trivy results to cosign-vuln
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: trivy.json
          scan-type: 'convert'
          format: 'cosign-vuln'
          # we don't actually limit them, but this gates the convert action
          limit-severities-for-sarif: true
          # empty makes it skip the --vuln-type arg
          vuln-type: ''
          output: 'trivy.cosign.json'

      - name: Attach a security attestation to the signed image
        run: cosign attest --yes --type vuln --predicate trivy.cosign.json ${{ inputs.image }}@${{ steps.docker_push.outputs.digest }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
