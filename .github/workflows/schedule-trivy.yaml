name: Run Trivy

on:
  workflow_call:
    inputs:
      image-ref:
        description: 'image-ref to scan'
        required: true
        type: string
      timeout:
        description: 'Scan timeout duration'
        required: false
        default: '5m0s'
        type: string

jobs:
  trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.0.5

      - name: Run Trivy vulnerability scanner (sarif)
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: ${{ inputs.image-ref }}
          timeout: ${{ inputs.timeout }}
          format: 'sarif'
          ignore-unfixed: true
          scanners: 'vuln'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # see https://github.com/aquasecurity/trivy/issues/3243 for why we run it twice
      # we create a vuln.jsn if we also plan on uploading it as attestation
      - name: Run Trivy vulnerability scanner (cosign-vuln)
        uses: aquasecurity/trivy-action@0.10.0
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
        with:
          image-ref: 'ghcr.io/radiorabe/ubi9-minimal:${{ steps.meta.outputs.version }}'
          format: 'cosign-vuln'
          ignore-unfixed: true
          output: 'vuln.json'

      - name: Attach a security attestation to the signed image
        run: cosign attest --type vuln --predicate vuln.json ${{ inputs.image-ref }}
        if: github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v')
