name: Run Trivy

on:
  workflow_call:
    inputs:
      image-ref:
        description: 'image-ref to scan'
        required: true
        type: string
      timeout:
        description: 'Scan timeout duration'
        required: false
        default: '5m0s'
        type: string

jobs:
  trivy:
    runs-on: ubuntu-latest

    permissions:
      actions: none
      checks: none
      contents: none
      deployments: none
      issues: none
      packages: write # allow pushing attestation to registry
      pull-requests: none
      repository-projects: none
      security-events: write
      statuses: none
      id-token: write # needed for signing the images with GitHub OIDC using cosign

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.0.5

      - name: Run Trivy vulnerability scanner (sarif)
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: ${{ inputs.image-ref }}
          timeout: ${{ inputs.timeout }}
          format: 'sarif'
          ignore-unfixed: true
          scanners: 'vuln'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # see https://github.com/aquasecurity/trivy/issues/3243 for why we run it twice
      # we create a vuln.jsn if we also plan on uploading it as attestation
      - name: Run Trivy vulnerability scanner (cosign-vuln)
        uses: aquasecurity/trivy-action@0.11.2
        with:
          image-ref: 'ghcr.io/radiorabe/ubi9-minimal:${{ steps.meta.outputs.version }}'
          format: 'cosign-vuln'
          ignore-unfixed: true
          output: 'vuln.json'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attach a security attestation to the signed image
        run: cosign attest --yes --type vuln --predicate vuln.json ${{ inputs.image-ref }}
